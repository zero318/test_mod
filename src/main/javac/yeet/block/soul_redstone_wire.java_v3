package yeet.block;

#include "..\util.h"

import yeet.YeetUtil;
import yeet.block.CustomStates;
import yeet.BlockRegistration;
import net.minecraft.world.level.block.RedStoneWireBlock;

import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.Maps;
import com.google.common.collect.Sets;
import com.mojang.math.Vector3f;
import java.util.HashSet;
import java.util.Map;
import java.util.Random;
import javax.annotation.Nullable;
import net.minecraft.Util;
import net.minecraft.core.BlockPos;
import net.minecraft.core.Direction;
import net.minecraft.core.Vec3i;
import net.minecraft.core.particles.DustParticleOptions;
import net.minecraft.core.particles.ParticleOptions;
import net.minecraft.util.Mth;
import net.minecraft.world.InteractionHand;
import net.minecraft.world.InteractionResult;
import net.minecraft.world.entity.player.Abilities;
import net.minecraft.world.entity.player.Player;
import net.minecraft.world.item.context.BlockPlaceContext;
import net.minecraft.world.level.BlockGetter;
import net.minecraft.world.level.Level;
import net.minecraft.world.level.LevelAccessor;
import net.minecraft.world.level.LevelReader;
import net.minecraft.world.level.block.Block;
import net.minecraft.world.level.block.Blocks;
import net.minecraft.world.level.block.Mirror;
import net.minecraft.world.level.block.ObserverBlock;
import net.minecraft.world.level.block.RepeaterBlock;
import net.minecraft.world.level.block.Rotation;
import net.minecraft.world.level.block.state.BlockBehaviour;
import net.minecraft.world.level.block.state.BlockState;
import net.minecraft.world.level.block.state.StateDefinition;
import net.minecraft.world.level.block.state.properties.BlockStateProperties;
import net.minecraft.world.level.block.state.properties.DirectionProperty;
import net.minecraft.world.level.block.state.properties.EnumProperty;
import net.minecraft.world.level.block.state.properties.IntegerProperty;
import net.minecraft.world.level.block.state.properties.Property;
import net.minecraft.world.level.block.state.properties.RedstoneSide;
import net.minecraft.world.phys.BlockHitResult;
import net.minecraft.world.phys.Vec3;
import net.minecraft.world.phys.shapes.CollisionContext;
import net.minecraft.world.phys.shapes.Shapes;
import net.minecraft.world.phys.shapes.VoxelShape;

#define BASE_MASK		(0x03)

#define NORTH_MASK		(0x03)
#define SOUTH_MASK		(0x0C)
#define WEST_MASK		(0x30)
#define EAST_MASK		(0xC0)

#define BITS_PER_DIR	(2)

#define DOWN_ORDINAL	(0)
#define UP_ORDINAL		(1)
#define NORTH_ORDINAL	(2)
#define SOUTH_ORDINAL	(3)
#define WEST_ORDINAL	(4)
#define EAST_ORDINAL	(5)

// I doubt Java is smart enough to optimize this to a LEA,
// but you never know. Keep as A * B - C instead of (A - C) * B
#define ordinal_to_shift(ordinal) ((ordinal) * 2 - 4)

#define ordinal_to_mask(ordinal) (BASE_MASK << ordinal_to_shift(ordinal))

#define NONE_BITS		(0)
#define SIDE_BITS		(1)
#define UP_BITS			(2)

#define NORTH_SHIFT		(0)
#define SOUTH_SHIFT		(2)
#define WEST_SHIFT		(4)
#define EAST_SHIFT		(6)

#define NO_CONNECTIONS	(0x00)
#define NORTH_SIDE		(0x01)
#define NORTH_UP		(0x02)
#define SOUTH_SIDE		(0x04)
#define SOUTH_UP		(0x08)
#define WEST_SIDE		(0x10)
#define WEST_UP			(0x20)
#define EAST_SIDE		(0x40)
#define EAST_UP			(0x80)

#define CROSS_SHAPE		(NORTH_SIDE | SOUTH_SIDE | WEST_SIDE | EAST_SIDE)

#define connection_type_is_not_none(type) ((type) != 0)

#define has_connection_by_ordinal(connections, ordinal) (((connections) & ordinal_to_mask(ordinal)) != 0)

#define has_north_connection(connections) (((connections) & (byte)NORTH_MASK) != 0)
#define has_any_swe_connection(connections) ((connections) > 0x03)
#define has_south_connection(connections) (((connections) & (byte)SOUTH_MASK) != 0)
#define has_any_nwe_connection(connections) (((connections) & (byte)~SOUTH_MASK) != 0)
#define has_west_connection(connections) (((connections) & (byte)WEST_MASK) != 0)
#define has_any_nse_connection(connections) (((connections) & (byte)~WEST_MASK) != 0)
#define has_east_connection(connections) ((connections) > 0x3F)
#define has_any_nsw_connection(connections) (((connections) & (byte)~EAST_MASK) != 0)

#define has_no_connections(connections) ((connections) == NO_CONNECTIONS)

#define ExtendsVanillaWire 0

#if ExtendsVanillaWire
#define SoulWireBase RedStoneWireBlock
#define StateIsWire(blockstate) ((blockstate).getBlock() instanceof RedStoneWireBlock)
#define ShouldConnect(...) RedStoneWireBlock.shouldConnectTo(__VA_ARGS__)
#else
//import java.lang.reflect.Method;
#define SoulWireBase Block
#define StateIsWire(blockstate) ((blockstate).is(BlockRegistration.REDSTONE_WIRES_TAG))
#define ShouldConnect(...) SoulRedstoneWire.shouldConnectTo(__VA_ARGS__)
#endif

//========================================
//
//
//
//
//
//========================================

public class SoulRedstoneWire extends SoulWireBase {
	
	private static final VoxelShape[] SHAPES_LUT = new VoxelShape[171];
	
	static {
		VoxelShape shape_dot = SHAPES_LUT[0] = Block.box(3.0, 0.0, 3.0, 13.0, 1.0, 13.0);
		for (int i = 1; i < 171; ++i) {
			int side_count = popcount(i);
			if (side_count != 1 && side_count <= 4) {
				VoxelShape shape = shape_dot;
				if (has_north_connection(i)) {
					shape = Shapes.or(shape, Block.box(3.0, 0.0, 0.0, 13.0, 1.0, 13.0));
					if ((i & NORTH_UP) != 0) {
						shape = Shapes.or(shape, Block.box(3.0, 0.0, 0.0, 13.0, 16.0, 1.0));
					}
				}
				if (has_south_connection(i)) {
					shape = Shapes.or(shape, Block.box(3.0, 0.0, 3.0, 13.0, 1.0, 16.0));
					if ((i & SOUTH_UP) != 0) {
						shape = Shapes.or(shape, Block.box(3.0, 0.0, 15.0, 13.0, 16.0, 16.0));
					}
				}
				if (has_west_connection(i)) {
					shape = Shapes.or(shape, Block.box(0.0, 0.0, 3.0, 13.0, 1.0, 13.0));
					if ((i & WEST_UP) != 0) {
						shape = Shapes.or(shape, Block.box(0.0, 0.0, 3.0, 1.0, 16.0, 13.0));
					}
				}
				if (has_east_connection(i)) {
					shape = Shapes.or(shape, Block.box(3.0, 0.0, 3.0, 16.0, 1.0, 13.0));
					if ((i & EAST_UP) != 0) {
						shape = Shapes.or(shape, Block.box(15.0, 0.0, 3.0, 16.0, 16.0, 13.0));
					}
				}
				SHAPES_LUT[i] = shape;
			}
		}
/*
#if !ExtendsVanillaWire
		try {
			Method should_connect_to1 = RedStoneWireBlock.class.getDeclaredMethod("shouldConnectTo", BlockState.class);
            should_connect_to1.setAccessible(true);
			Method should_connect_to2 = RedStoneWireBlock.class.getDeclaredMethod("shouldConnectTo", BlockState.class, Direction.class);
            should_connect_to2.setAccessible(true);
		} catch (IllegalAccessException | NoSuchMethodException e) {
            throw new RuntimeException("", e);
        }
#endif
*/
	}
	
	public static final SparseIntegerProperty CONNECTIONS = CustomStates.CONNECTIONS;
	private boolean shouldSignal = true;
#if !ExtendsVanillaWire
	public static final IntegerProperty POWER = BlockStateProperties.POWER;
	//private final BlockState crossState;
#endif
	
	public SoulRedstoneWire(BlockBehaviour.Properties properties) {
        super(properties);
		this.registerDefaultState(
			this.stateDefinition.any()
				.setValue(POWER, 0)
				.setValue(CONNECTIONS, NO_CONNECTIONS)
		);
#if !ExtendsVanillaWire
		//this.crossState = this.defaultBlockState().setValue(CONNECTIONS, CROSS_SHAPE);
#endif
	}
	
	@Override
    protected void createBlockStateDefinition(StateDefinition.Builder<Block, BlockState> builder) {
        builder.add(POWER, CONNECTIONS);
    }
	
	private boolean canSurviveOn(BlockGetter blockGetter, BlockPos blockPos, BlockState blockState) {
        return blockState.isFaceSturdy(blockGetter, blockPos, Direction.UP) || blockState.is(Blocks.HOPPER);
    }
	
#if !ExtendsVanillaWire
	@Override
    public boolean canSurvive(BlockState blockState, LevelReader levelReader, BlockPos blockPos) {
        BlockPos blockPos2 = blockPos.below();
        BlockState blockState2 = levelReader.getBlockState(blockPos2);
        return this.canSurviveOn(levelReader, blockPos2, blockState2);
    }

	@Override
    public BlockState getStateForPlacement(BlockPlaceContext blockPlaceContext) {
        return this.defaultBlockState().setValue(CONNECTIONS, this.getConnectionState(blockPlaceContext.getLevel(), CROSS_SHAPE, blockPlaceContext.getClickedPos()));
    }
	
	@Override
    public void onPlace(BlockState blockState, Level level, BlockPos blockPos, BlockState blockState2, boolean bl) {
        if (!level.isClientSide && !blockState2.is(blockState.getBlock())) {
			BlockPos.MutableBlockPos mutable_pos = new BlockPos.MutableBlockPos();
            this.updatePowerStrength(level, mutable_pos.set(blockPos), blockState, UPDATE_CLIENTS | UPDATE_SUPPRESS_LIGHT);
			level.updateNeighborsAt(mutable_pos.setWithOffset(blockPos, UP_OFFSETS), this);
			level.updateNeighborsAt(mutable_pos.move(UP_TO_DOWN_DELTA), this);
			this.updateNeighborsOfNeighboringWires(level, mutable_pos.move(DOWN_TO_MID_DELTA));
        }
    }

    @Override
    public void onRemove(BlockState blockState, Level level, BlockPos blockPos, BlockState blockState2, boolean bl) {
        if (!bl && !blockState.is(blockState2.getBlock())) {
            super.onRemove(blockState, level, blockPos, blockState2, false);
			if (!level.isClientSide) {
				BlockPos.MutableBlockPos mutable_pos = new BlockPos.MutableBlockPos();
				level.updateNeighborsAt(mutable_pos.setWithOffset(blockPos, DOWN_OFFSETS), this);
				level.updateNeighborsAt(mutable_pos.move(DOWN_TO_UP_DELTA), this);
				level.updateNeighborsAt(mutable_pos.move(UP_TO_NORTH_DELTA), this);
				level.updateNeighborsAt(mutable_pos.move(NORTH_TO_SOUTH_DELTA), this);
				level.updateNeighborsAt(mutable_pos.move(SOUTH_TO_WEST_DELTA), this);
				level.updateNeighborsAt(mutable_pos.move(WEST_TO_EAST_DELTA), this);
				this.updatePowerStrength(level, mutable_pos.move(EAST_TO_MID_DELTA), blockState, UPDATE_CLIENTS | UPDATE_SUPPRESS_LIGHT);
				this.updateNeighborsOfNeighboringWires(level, mutable_pos.set(blockPos));
			}
        }
    }
	
	@Override
    public void neighborChanged(BlockState blockState, Level level, BlockPos blockPos, Block block, BlockPos blockPos2, boolean bl) {
        if (!level.isClientSide) {
            if (blockState.canSurvive(level, blockPos)) {
				BlockPos.MutableBlockPos mutable_pos = new BlockPos.MutableBlockPos();
				this.updatePowerStrength(level, mutable_pos.set(blockPos), blockState, UPDATE_NEIGHBORS | UPDATE_CLIENTS | UPDATE_KNOWN_SHAPE | UPDATE_SUPPRESS_LIGHT);
			} else {
				RedStoneWireBlock.dropResources(blockState, level, blockPos);
				level.removeBlock(blockPos, false);
			}
        }
    }
	
	@Override
    public int getDirectSignal(BlockState blockState, BlockGetter blockGetter, BlockPos blockPos, Direction direction) {
        return this.shouldSignal ? blockState.getSignal(blockGetter, blockPos, direction) : 0;
    }
	
	@Override
    public boolean isSignalSource(BlockState blockState) {
        return this.shouldSignal;
    }
	
#if 0
	// FIXME: This is where the duplicate updates are! Do something about it!
	private void updateNeighborsOfNeighboringWires(Level level, BlockPos.MutableBlockPos mutable_pos, int connections) {
        /* for (Direction direction : Direction.Plane.HORIZONTAL) {
            this.checkCornerChangeAt(level, blockPos.relative(direction));
        } */
		this.checkCornerChangeAt(level, mutable_pos.move(NORTH_OFFSETS));
		this.checkCornerChangeAt(level, mutable_pos.move(NORTH_TO_EAST_DELTA));
		this.checkCornerChangeAt(level, mutable_pos.move(EAST_TO_SOUTH_DELTA));
		this.checkCornerChangeAt(level, mutable_pos.move(SOUTH_TO_WEST_DELTA));
        /* for (Direction direction : Direction.Plane.HORIZONTAL) {
            BlockPos blockPos2 = blockPos.relative(direction);
			
			this.checkCornerChangeAt(level,
				level.getBlockState(blockPos2).isRedstoneConductor(level, blockPos2)
					? blockPos2.above() : blockPos2.below());
        } */
		BlockPos.MutableBlockPos mutable_pos2 = new BlockPos.MutableBlockPos();
		mutable_pos.move(WEST_TO_NORTH_DELTA);
		this.checkCornerChangeAt(level, mutable_pos2.setWithOffset(mutable_pos, 0, level.getBlockState(mutable_pos).isRedstoneConductor(level, mutable_pos) ? 1 : -1, 0));
		mutable_pos.move(NORTH_TO_EAST_DELTA);
		this.checkCornerChangeAt(level, mutable_pos2.setWithOffset(mutable_pos, 0, level.getBlockState(mutable_pos).isRedstoneConductor(level, mutable_pos) ? 1 : -1, 0));
		mutable_pos.move(EAST_TO_SOUTH_DELTA);
		this.checkCornerChangeAt(level, mutable_pos2.setWithOffset(mutable_pos, 0, level.getBlockState(mutable_pos).isRedstoneConductor(level, mutable_pos) ? 1 : -1, 0));
		mutable_pos.move(SOUTH_TO_WEST_DELTA);
		this.checkCornerChangeAt(level, mutable_pos2.setWithOffset(mutable_pos, 0, level.getBlockState(mutable_pos).isRedstoneConductor(level, mutable_pos) ? 1 : -1, 0));
    }
	
	private void checkCornerChangeAt(Level level, BlockPos blockPos) {
        if (level.getBlockState(blockPos).is(BlockRegistration.WIRE_CONNECTIONS_TAG)) {
            level.updateNeighborsAt(blockPos, this);
			level.updateNeighborsAt(blockPos.relative(Direction.DOWN), this);
			level.updateNeighborsAt(blockPos.relative(Direction.UP), this);
			level.updateNeighborsAt(blockPos.relative(Direction.NORTH), this);
			level.updateNeighborsAt(blockPos.relative(Direction.SOUTH), this);
			level.updateNeighborsAt(blockPos.relative(Direction.WEST), this);
			level.updateNeighborsAt(blockPos.relative(Direction.EAST), this);
        }
    }

#else
	
	private void updateNeighborsOfNeighboringWires(Level level, BlockPos.MutableBlockPos mutable_pos) {
        BlockPos.MutableBlockPos mutable_pos2 = new BlockPos.MutableBlockPos();
		mutable_pos2.set(mutable_pos);
		boolean had_north;
		if (had_north = StateIsWire(level.getBlockState(mutable_pos.move(NORTH_OFFSETS)))) {
			level.updateNeighborsAt(mutable_pos, this);
			level.updateNeighborsAt(mutable_pos.move(DOWN_OFFSETS), this);
			level.updateNeighborsAt(mutable_pos.move(DOWN_TO_UP_DELTA), this);
			level.updateNeighborsAt(mutable_pos.move(UP_TO_NORTH_DELTA), this);
			// skip south
			level.updateNeighborsAt(mutable_pos.move(NORTH_TO_WEST_DELTA), this);
			level.updateNeighborsAt(mutable_pos.move(WEST_TO_EAST_DELTA), this);
			mutable_pos.move(EAST_TO_MID_DELTA);
		}
		boolean had_east;
		if (had_east = StateIsWire(level.getBlockState(mutable_pos.move(SOUTH_EAST_OFFSETS)))) {
			level.updateNeighborsAt(mutable_pos, this);
			level.updateNeighborsAt(mutable_pos.move(DOWN_OFFSETS), this);
			level.updateNeighborsAt(mutable_pos.move(DOWN_TO_UP_DELTA), this);
			if (!had_north) level.updateNeighborsAt(mutable_pos.move(UP_TO_NORTH_DELTA), this);
			level.updateNeighborsAt(mutable_pos.setWithOffset(mutable_pos2, SOUTH_EAST_OFFSETS), this);
			// skip west
			level.updateNeighborsAt(mutable_pos.move(SOUTH_TO_EAST_DELTA), this);
			mutable_pos.move(EAST_TO_MID_DELTA);
		}
		boolean had_south;
		if (had_south = StateIsWire(level.getBlockState(mutable_pos.move(SOUTH_WEST_OFFSETS)))) {
			level.updateNeighborsAt(mutable_pos, this);
			level.updateNeighborsAt(mutable_pos.move(DOWN_OFFSETS), this);
			level.updateNeighborsAt(mutable_pos.move(DOWN_TO_UP_DELTA), this);
			// skip north
			level.updateNeighborsAt(mutable_pos.move(UP_TO_SOUTH_DELTA), this);
			level.updateNeighborsAt(mutable_pos.move(SOUTH_TO_WEST_DELTA), this);
			if (!had_east) level.updateNeighborsAt(mutable_pos.move(WEST_TO_EAST_DELTA), this);
		}
		boolean had_west;
		if (had_west = StateIsWire(level.getBlockState(mutable_pos.setWithOffset(mutable_pos2, WEST_OFFSETS)))) {
			level.updateNeighborsAt(mutable_pos, this);
			level.updateNeighborsAt(mutable_pos.move(DOWN_OFFSETS), this);
			level.updateNeighborsAt(mutable_pos.move(DOWN_TO_UP_DELTA), this);
			if (!had_north) level.updateNeighborsAt(mutable_pos.move(UP_TO_NORTH_DELTA), this);
			// skip east
			if (!had_south) level.updateNeighborsAt(mutable_pos.setWithOffset(mutable_pos2, SOUTH_WEST_OFFSETS), this);
			level.updateNeighborsAt(mutable_pos.setWithOffset(mutable_pos2, -2, 0, 0), this);
		}
		mutable_pos2.move(NORTH_OFFSETS);
		if (!had_north && StateIsWire(level.getBlockState(mutable_pos.setWithOffset(mutable_pos2, 0, level.getBlockState(mutable_pos2).isRedstoneConductor(level, mutable_pos2) ? 1 : -1, 0)))) {
			//level.updateNeighborsAt(mutable_pos, this);
			level.updateNeighborsAt(mutable_pos.move(DOWN_OFFSETS), this);
			level.updateNeighborsAt(mutable_pos.move(DOWN_TO_UP_DELTA), this);
			level.updateNeighborsAt(mutable_pos.move(UP_TO_NORTH_DELTA), this);
			level.updateNeighborsAt(mutable_pos.move(NORTH_TO_SOUTH_DELTA), this);
			level.updateNeighborsAt(mutable_pos.move(SOUTH_TO_WEST_DELTA), this);
			level.updateNeighborsAt(mutable_pos.move(WEST_TO_EAST_DELTA), this);
		}
		mutable_pos2.move(NORTH_TO_EAST_DELTA);
		if (!had_east && StateIsWire(level.getBlockState(mutable_pos.setWithOffset(mutable_pos2, 0, level.getBlockState(mutable_pos2).isRedstoneConductor(level, mutable_pos2) ? 1 : -1, 0)))) {
			//level.updateNeighborsAt(mutable_pos, this);
			level.updateNeighborsAt(mutable_pos.move(DOWN_OFFSETS), this);
			level.updateNeighborsAt(mutable_pos.move(DOWN_TO_UP_DELTA), this);
			level.updateNeighborsAt(mutable_pos.move(UP_TO_NORTH_DELTA), this);
			level.updateNeighborsAt(mutable_pos.move(NORTH_TO_SOUTH_DELTA), this);
			level.updateNeighborsAt(mutable_pos.move(SOUTH_TO_WEST_DELTA), this);
			level.updateNeighborsAt(mutable_pos.move(WEST_TO_EAST_DELTA), this);
		}
		mutable_pos2.move(EAST_TO_SOUTH_DELTA);
		if (!had_south && StateIsWire(level.getBlockState(mutable_pos.setWithOffset(mutable_pos2, 0, level.getBlockState(mutable_pos2).isRedstoneConductor(level, mutable_pos2) ? 1 : -1, 0)))) {
			//level.updateNeighborsAt(mutable_pos, this);
			level.updateNeighborsAt(mutable_pos.move(DOWN_OFFSETS), this);
			level.updateNeighborsAt(mutable_pos.move(DOWN_TO_UP_DELTA), this);
			level.updateNeighborsAt(mutable_pos.move(UP_TO_NORTH_DELTA), this);
			level.updateNeighborsAt(mutable_pos.move(NORTH_TO_SOUTH_DELTA), this);
			level.updateNeighborsAt(mutable_pos.move(SOUTH_TO_WEST_DELTA), this);
			level.updateNeighborsAt(mutable_pos.move(WEST_TO_EAST_DELTA), this);
		}
		mutable_pos2.move(SOUTH_TO_WEST_DELTA);
		if (!had_west && StateIsWire(level.getBlockState(mutable_pos.setWithOffset(mutable_pos2, 0, level.getBlockState(mutable_pos2).isRedstoneConductor(level, mutable_pos2) ? 1 : -1, 0)))) {
			//level.updateNeighborsAt(mutable_pos, this);
			level.updateNeighborsAt(mutable_pos.move(DOWN_OFFSETS), this);
			level.updateNeighborsAt(mutable_pos.move(DOWN_TO_UP_DELTA), this);
			level.updateNeighborsAt(mutable_pos.move(UP_TO_NORTH_DELTA), this);
			level.updateNeighborsAt(mutable_pos.move(NORTH_TO_SOUTH_DELTA), this);
			level.updateNeighborsAt(mutable_pos.move(SOUTH_TO_WEST_DELTA), this);
			level.updateNeighborsAt(mutable_pos.move(WEST_TO_EAST_DELTA), this);
		}
    }
#endif
	
	protected static boolean shouldConnectTo(BlockState blockState) {
        return ShouldConnect(blockState, null);
    }

    protected static boolean shouldConnectTo(BlockState blockState, @Nullable Direction direction) {
        if (blockState.is(BlockRegistration.WIRE_CONNECTIONS_TAG)) {
            return true;
        }
        if (blockState.is(BlockRegistration.REPEATER_CONNECTIONS_TAG)) {
            Direction direction2 = blockState.getValue(RepeaterBlock.FACING);
            return direction2 == direction || direction2.getOpposite() == direction;
        }
        if (blockState.is(BlockRegistration.OBSERVER_CONNECTIONS_TAG)) {
            return direction == blockState.getValue(ObserverBlock.FACING);
        }
        return blockState.isSignalSource() && direction != null;
    }
#endif
	
	private static final int[] COLORS = {
		0x0F4547,
		0x166669,
		0x186F72,
		0x1A787B,
		0x1C8185,
		0x1E8A8E,
		0x209397,
		0x229CA1,
		0x24A6AA,
		0x26AFB3,
		0x28BABE,
		0x2AC3C8,
		0x2CCCD1,
		0x2ED5DA,
		0x30DEE4,
		0x32E7ED
	};
	
	// isSignalSource not overwritten
	
	public static int getColorForPower(int n) {
        return COLORS[n];
    }
	
	// spawnParticlesAlongLine (omitted because animateTick is removed)
	@Override
    public void animateTick(BlockState blockState, Level level, BlockPos blockPos, Random random) {
	}
	
	// rotation of NONE will end up falling through the switch in RedstoneWireBlock
	@Override
    public BlockState rotate(BlockState blockState, Rotation rotation) {
        int connections = blockState.getValue(CONNECTIONS);
		int temp;
		switch (rotation) {
			default:
				return blockState;
			case CLOCKWISE_90: {
				temp = connections >>> 4;
				temp += connections << 6 & 0xC0;
				connections &= 0x30;
				//temp += connections << 2 & 0x30;
				return blockState.setValue(CONNECTIONS, connections * 4 + temp);
            }
            case CLOCKWISE_180: {
				temp = connections >>> 2 & 0x33;
				connections &= 0xCC;
				//temp += connections << 2 & 0xCC;
				return blockState.setValue(CONNECTIONS, connections * 4 + temp);
            }
            case COUNTERCLOCKWISE_90: {
				temp = connections >>> 6;
				temp += connections >> 2 & 0x0C;
				temp += connections << 4 & 0xF0;
                return blockState.setValue(CONNECTIONS, temp);
            }
        }
    }
	
	// mirror of NONE will end up falling through the switch in RedstoneWireBlock
	@Override
    public BlockState mirror(BlockState blockState, Mirror mirror) {
		int connections = blockState.getValue(CONNECTIONS);
		int temp;
		switch (mirror) {
            case LEFT_RIGHT: {
				temp = connections >>> 2 & 0x03;
				temp += connections & 0xF0;
				connections &= 0x03;
				return blockState.setValue(CONNECTIONS, connections * 4 + temp);
            }
            case FRONT_BACK: {
				temp = connections >>> 2 & 0x30;
				temp += connections & 0x0F;
				connections &= 0x30;
				return blockState.setValue(CONNECTIONS, connections * 4 + temp);
            }
        }
        return super.mirror(blockState, mirror);
    }
	
	@Override
    public InteractionResult use(BlockState blockState, Level level, BlockPos blockPos, Player player, InteractionHand interactionHand, BlockHitResult blockHitResult) {
        if (player.getAbilities().mayBuild) {
            int connections = blockState.getValue(CONNECTIONS);
			int number_of_connections = popcount(connections);
			if (number_of_connections == 0 || number_of_connections == 4) {
				int new_connections = this.getConnectionState(level, connections, blockPos);
				connections ^= new_connections;
				if (connections != 0) {
					blockState = blockState.setValue(CONNECTIONS, new_connections);
					level.setBlock(blockPos, blockState, UPDATE_ALL);
					BlockPos.MutableBlockPos mutable_pos = new BlockPos.MutableBlockPos();
					mutable_pos.setWithOffset(blockPos, NORTH_OFFSETS);
					if (popcount(connections & NORTH_MASK) == 1 || level.getBlockState(mutable_pos).isRedstoneConductor(level, mutable_pos)) {
						level.updateNeighborsAtExceptFromFacing(mutable_pos, blockState.getBlock(), Direction.SOUTH);
					}
					mutable_pos.move(NORTH_TO_EAST_DELTA);
					//mutable_pos.setWithOffset(blockPos, EAST_OFFSETS);
					if (popcount(connections & EAST_MASK) == 1 || level.getBlockState(mutable_pos).isRedstoneConductor(level, mutable_pos)) {
						level.updateNeighborsAtExceptFromFacing(mutable_pos, blockState.getBlock(), Direction.WEST);
					}
					mutable_pos.move(EAST_TO_SOUTH_DELTA);
					//mutable_pos.setWithOffset(blockPos, SOUTH_OFFSETS);
					if (popcount(connections & SOUTH_MASK) == 1 || level.getBlockState(mutable_pos).isRedstoneConductor(level, mutable_pos)) {
						level.updateNeighborsAtExceptFromFacing(mutable_pos, blockState.getBlock(), Direction.NORTH);
					}
					mutable_pos.move(SOUTH_TO_WEST_DELTA);
					//mutable_pos.setWithOffset(blockPos, WEST_OFFSETS);
					if (popcount(connections & WEST_MASK) == 1 || level.getBlockState(mutable_pos).isRedstoneConductor(level, mutable_pos)) {
						level.updateNeighborsAtExceptFromFacing(mutable_pos, blockState.getBlock(), Direction.EAST);
					}
					return InteractionResult.SUCCESS;
				}
			}
        }
        return InteractionResult.PASS;
    }
	
	
	@Override
    public VoxelShape getShape(BlockState blockState, BlockGetter blockGetter, BlockPos blockPos, CollisionContext collisionContext) {
        return SHAPES_LUT[blockState.getValue(CONNECTIONS)];
    }
	
	private int getConnectingSide(BlockGetter blockGetter, BlockPos self_pos, Direction direction, boolean above_is_solid, BlockPos.MutableBlockPos mutable_pos) {
		BlockState neighbor_state = blockGetter.getBlockState(self_pos);
		int ret = NONE_BITS;
		do {
			if (!above_is_solid && this.canSurviveOn(blockGetter, self_pos, neighbor_state) && ShouldConnect(blockGetter.getBlockState(mutable_pos.setWithOffset(self_pos, UP_OFFSETS)))) {
				if (neighbor_state.isFaceSturdy(blockGetter, self_pos, direction.getOpposite())) {
					ret += UP_BITS;
					break;
				}
			}
			else if (!(ShouldConnect(neighbor_state, direction) || !neighbor_state.isRedstoneConductor(blockGetter, self_pos) && ShouldConnect(blockGetter.getBlockState(mutable_pos.setWithOffset(self_pos, DOWN_OFFSETS))))) {
				break;
			}
			ret += SIDE_BITS;
		} while (false);
		return ret << ordinal_to_shift(direction.ordinal());
    }
	
	private int getMissingConnections(BlockGetter blockGetter, BlockPos.MutableBlockPos mutable_pos) {
		boolean above_is_solid = blockGetter.getBlockState(mutable_pos.move(UP_OFFSETS)).isRedstoneConductor(blockGetter, mutable_pos.move(UP_TO_MID_DELTA));
		int connections = NO_CONNECTIONS;
		BlockPos.MutableBlockPos mutable_pos2 = new BlockPos.MutableBlockPos();
		connections |= this.getConnectingSide(blockGetter, mutable_pos.move(NORTH_OFFSETS), Direction.NORTH, above_is_solid, mutable_pos2);
		connections |= this.getConnectingSide(blockGetter, mutable_pos.move(NORTH_TO_SOUTH_DELTA), Direction.SOUTH, above_is_solid, mutable_pos2);
		connections |= this.getConnectingSide(blockGetter, mutable_pos.move(SOUTH_TO_WEST_DELTA), Direction.WEST, above_is_solid, mutable_pos2);
		connections |= this.getConnectingSide(blockGetter, mutable_pos.move(WEST_TO_EAST_DELTA), Direction.EAST, above_is_solid, mutable_pos2);
        return connections;
    }
	
	/*
	@Override
	private static boolean isDot(BlockState blockState) {
		return has_no_connections(blockState.getValue(CONNECTIONS));
    }
	@Override
	private static boolean isCross(BlockState blockState) {
		return popcount(blockState.getValue(CONNECTIONS)) == 4;
	}
	*/
	
	// Can't use a mutable pos
	private int getConnectionState(BlockGetter blockGetter, int connections, BlockPos self_pos) {
		boolean started_as_dot = has_no_connections(connections);
		BlockPos.MutableBlockPos mutable_pos = new BlockPos.MutableBlockPos();
        connections = this.getMissingConnections(blockGetter, mutable_pos.set(self_pos));
        if (started_as_dot && has_no_connections(connections)) {
			return NO_CONNECTIONS; // self_state.setValue(CONNECTIONS, NO_CONNECTIONS);
        }
		int new_connections = connections;
		if (!has_any_nwe_connection(connections)) new_connections += NORTH_SIDE;
		if (!has_any_swe_connection(connections)) new_connections += SOUTH_SIDE;
		if (!has_any_nsw_connection(connections)) new_connections += WEST_SIDE;
		if (!has_any_nse_connection(connections)) new_connections += EAST_SIDE;
		return new_connections;
    }
	
	@Override
    public BlockState updateShape(BlockState blockState, Direction direction, BlockState blockState2, LevelAccessor levelAccessor, BlockPos blockPos, BlockPos blockPos2) {
#define direction_index direction_int
#define direction_mask direction_int
		int direction_index = direction.ordinal();
		if (direction_index != DOWN_ORDINAL) {
			int redstone_side;
			int connections = blockState.getValue(CONNECTIONS);
			if (direction_index == UP_ORDINAL) {
				redstone_side = this.getConnectionState(levelAccessor, connections, blockPos);
			}
			else {
				BlockPos.MutableBlockPos mutable_pos = new BlockPos.MutableBlockPos();
				mutable_pos.setWithOffset(blockPos, UP_OFFSETS);
				boolean above_is_solid = levelAccessor.getBlockState(mutable_pos.move(UP_OFFSETS)).isRedstoneConductor(levelAccessor, mutable_pos.move(UP_TO_MID_DELTA));
				redstone_side = this.getConnectingSide(levelAccessor, mutable_pos.move(YeetUtil.all_direction_offsets[direction_index]), direction, above_is_solid, new BlockPos.MutableBlockPos());
				
				direction_mask = ordinal_to_mask(direction_index) & connections;
				if (popcount(connections) != 4 &&
					//connection_type_is_not_none(redstone_side) == has_connection_by_ordinal(connections, direction_index)
					popcount(redstone_side ^ direction_mask) != 1
				) {
					redstone_side |= connections ^ direction_mask;
				}
				else {
					redstone_side = this.getConnectionState(levelAccessor, CROSS_SHAPE, blockPos);
				}
			}
			if (redstone_side != connections) { // This prevents the stupid "144 is not a valid value" error
				blockState = blockState.setValue(CONNECTIONS, redstone_side);
			}
			/* try {
				blockState = blockState.setValue(CONNECTIONS, redstone_side);
			}
			catch (IllegalArgumentException e) {
				int length = CustomStates.WIRE_STATES.length;
				String pingas = "BAD BLOCKSTATES (" + blockPos.getX() + "," + blockPos.getY() + "," + blockPos.getZ() + ")[" + blockState.getValue(CONNECTIONS) + "," + blockState.getValue(POWER) + "]: ";
				for (int i = 0; i < length; ++i) {
					int value = CustomStates.WIRE_STATES[i];
					try {
						blockState.setValue(CONNECTIONS, value);
					} catch (IllegalArgumentException e2) {
						pingas += value + " ";
					}
				}
				System.out.println(pingas);
				//throw new IllegalArgumentException(pingas);
			} */
		}
		return blockState;
#undef direction_index
#undef direction_mask
    }
	
	@Override
    public void updateIndirectNeighbourShapes(BlockState blockState, LevelAccessor levelAccessor, BlockPos blockPos, int n, int n2) {
        int connections = blockState.getValue(CONNECTIONS);
		if (!has_no_connections(connections)) {
			BlockPos.MutableBlockPos mutable_pos = new BlockPos.MutableBlockPos();
			BlockPos below_pos = blockPos.below();
			BlockState below_state = levelAccessor.getBlockState(below_pos);
			BlockPos above_pos = blockPos.above();
			BlockState above_state = levelAccessor.getBlockState(above_pos);
			BlockState neighbor_state;
			if (has_north_connection(connections)) {
				mutable_pos.setWithOffset(blockPos, NORTH_OFFSETS);
				if (!StateIsWire(levelAccessor.getBlockState(mutable_pos))) {
					mutable_pos.move(DOWN_OFFSETS);
					neighbor_state = levelAccessor.getBlockState(mutable_pos);
					if (!neighbor_state.is(Blocks.OBSERVER)) {
						RedStoneWireBlock.updateOrDestroy(neighbor_state,
							neighbor_state.updateShape(Direction.SOUTH, below_state, levelAccessor, mutable_pos, below_pos)
						, levelAccessor, mutable_pos, n, n2);
					}
				}
				mutable_pos.setWithOffset(blockPos, NORTH_UP_OFFSETS);
				neighbor_state = levelAccessor.getBlockState(mutable_pos);
				if (!neighbor_state.is(Blocks.OBSERVER)) {
					RedStoneWireBlock.updateOrDestroy(neighbor_state,
						neighbor_state.updateShape(Direction.SOUTH, above_state, levelAccessor, mutable_pos, above_pos)
					, levelAccessor, mutable_pos, n, n2);
				}
			}
			if (has_east_connection(connections)) {
				mutable_pos.setWithOffset(blockPos, EAST_OFFSETS);
				if (!StateIsWire(levelAccessor.getBlockState(mutable_pos))) {
					mutable_pos.move(DOWN_OFFSETS);
					neighbor_state = levelAccessor.getBlockState(mutable_pos);
					if (!neighbor_state.is(Blocks.OBSERVER)) {
						RedStoneWireBlock.updateOrDestroy(neighbor_state,
							neighbor_state.updateShape(Direction.WEST, below_state, levelAccessor, mutable_pos, below_pos)
						, levelAccessor, mutable_pos, n, n2);
					}
				}
				mutable_pos.setWithOffset(blockPos, EAST_UP_OFFSETS);
				neighbor_state = levelAccessor.getBlockState(mutable_pos);
				if (!neighbor_state.is(Blocks.OBSERVER)) {
					RedStoneWireBlock.updateOrDestroy(neighbor_state,
						neighbor_state.updateShape(Direction.WEST, above_state, levelAccessor, mutable_pos, above_pos)
					, levelAccessor, mutable_pos, n, n2);
				}
			}
			if (has_south_connection(connections)) {
				mutable_pos.setWithOffset(blockPos, SOUTH_OFFSETS);
				if (!StateIsWire(levelAccessor.getBlockState(mutable_pos))) {
					mutable_pos.move(DOWN_OFFSETS);
					neighbor_state = levelAccessor.getBlockState(mutable_pos);
					if (!neighbor_state.is(Blocks.OBSERVER)) {
						RedStoneWireBlock.updateOrDestroy(neighbor_state,
							neighbor_state.updateShape(Direction.NORTH, below_state, levelAccessor, mutable_pos, below_pos)
						, levelAccessor, mutable_pos, n, n2);
					}
				}
				mutable_pos.setWithOffset(blockPos, SOUTH_UP_OFFSETS);
				neighbor_state = levelAccessor.getBlockState(mutable_pos);
				if (!neighbor_state.is(Blocks.OBSERVER)) {
					RedStoneWireBlock.updateOrDestroy(neighbor_state,
						neighbor_state.updateShape(Direction.NORTH, above_state, levelAccessor, mutable_pos, above_pos)
					, levelAccessor, mutable_pos, n, n2);
				}
			}
			if (has_west_connection(connections)) {
				mutable_pos.setWithOffset(blockPos, WEST_OFFSETS);
				if (!StateIsWire(levelAccessor.getBlockState(mutable_pos))) {
					mutable_pos.move(DOWN_OFFSETS);
					neighbor_state = levelAccessor.getBlockState(mutable_pos);
					if (!neighbor_state.is(Blocks.OBSERVER)) {
						RedStoneWireBlock.updateOrDestroy(neighbor_state,
							neighbor_state.updateShape(Direction.EAST, below_state, levelAccessor, mutable_pos, below_pos)
						, levelAccessor, mutable_pos, n, n2);
					}
				}
				mutable_pos.setWithOffset(blockPos, WEST_UP_OFFSETS);
				neighbor_state = levelAccessor.getBlockState(mutable_pos);
				if (!neighbor_state.is(Blocks.OBSERVER)) {
					RedStoneWireBlock.updateOrDestroy(neighbor_state,
						neighbor_state.updateShape(Direction.EAST, above_state, levelAccessor, mutable_pos, above_pos)
					, levelAccessor, mutable_pos, n, n2);
				}
			}
		}
    }
	
	// getDirectSignal not overwritten
	
	@Override
    public int getSignal(BlockState blockState, BlockGetter blockGetter, BlockPos blockPos, Direction direction) {
		if (this.shouldSignal) {
			int direction_index = direction.ordinal();
			if (direction_index != DOWN_ORDINAL) {
				int power = blockState.getValue(POWER);
				if (power != 0 && (
						direction_index == UP_ORDINAL ||
						has_connection_by_ordinal(this.getConnectionState(blockGetter, blockState.getValue(CONNECTIONS), blockPos), opposite_direction_index(direction_index))
					)
				) {
					return power;
				}
			}
		}
		return 0;
    }
	
	
#define RESISTANCE (1)
#define power_after_resistance(power) ((power) - RESISTANCE)
	
	private void updatePowerStrength(Level level, BlockPos.MutableBlockPos mutable_pos, BlockState blockState, int flags) {
        this.shouldSignal = false;
        int highest_power = level.getBestNeighborSignal(mutable_pos);
        this.shouldSignal = true;
		BlockPos blockPos = mutable_pos.immutable();
        if (highest_power < 14) {
			BlockState neighbor_state;
			mutable_pos.setWithOffset(blockPos, UP_OFFSETS);
			boolean above_is_solid = level.getBlockState(mutable_pos).isRedstoneConductor(level, mutable_pos);
			
			for (int i = 0; i < 4; ++i) {
				mutable_pos.setWithOffset(blockPos, YeetUtil.horizontal_direction_offsets[i]);
				neighbor_state = level.getBlockState(mutable_pos);
				if (StateIsWire(neighbor_state)) {
					highest_power = Math.max(highest_power, power_after_resistance(neighbor_state.getValue(POWER)));
				}
				
				if (neighbor_state.isRedstoneConductor(level, mutable_pos)) {
					if (!above_is_solid && StateIsWire(neighbor_state = level.getBlockState(mutable_pos.move(UP_OFFSETS)))) {
						highest_power = Math.max(highest_power, power_after_resistance(neighbor_state.getValue(POWER)));
					}
				}
				else if (StateIsWire(neighbor_state = level.getBlockState(mutable_pos.move(DOWN_OFFSETS)))) {
					highest_power = Math.max(highest_power, power_after_resistance(neighbor_state.getValue(POWER)));
				}
				if (highest_power == 14) break;
			}
        }
        if (blockState.getValue(POWER) != highest_power) {
            //if (level.getBlockState(blockPos) == blockState) { // Why is this here?
                level.setBlock(blockPos, blockState.setValue(POWER, highest_power), flags);
            //}
			/* level.updateNeighborsAt(mutable_pos.move(DOWN_OFFSETS), this);
			level.updateNeighborsAt(mutable_pos.move(DOWN_TO_UP_DELTA), this);
			level.updateNeighborsAt(mutable_pos.move(UP_TO_NORTH_DELTA), this);
			level.updateNeighborsAt(mutable_pos.move(NORTH_TO_SOUTH_DELTA), this);
			level.updateNeighborsAt(mutable_pos.move(SOUTH_TO_WEST_DELTA), this);
			level.updateNeighborsAt(mutable_pos.move(WEST_TO_EAST_DELTA), this); */
        }
    }
}