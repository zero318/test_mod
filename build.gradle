buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        //classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
		classpath 'org.spongepowered:mixingradle:0.7.+'
    }
}
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
plugins {
    id 'eclipse'
    id 'maven-publish'
	id "com.roscopeco.jasm" version "0.7.0"
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'

version = '0.0.1'
group = 'yeet' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'test_mod'

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
//java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    // The mappings can be changed at any time and must be in the following format.
    // Channel:   Version:
    // official   MCVersion             Official field/method names from Mojang mapping files
    // parchment  YYYY.MM.DD-MCVersion  Open community-sourced parameter names and javadocs layered on top of official
    //
    // You must be aware of the Mojang license when using the 'official' or 'parchment' mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    //
    // Parchment is an unofficial project maintained by ParchmentMC, separate from MinecraftForge
    // Additional setup is needed to use their mappings: https://github.com/ParchmentMC/Parchment/wiki/Getting-Started
    //
    // Use non-default mappings at your own risk. They may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'official', version: '1.18.2'

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg') // Currently, this location cannot be changed from the default.

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', 'test_mod'

            mods {
                test_mod {
                    source sourceSets.main
                }
            }
			
			jvmArgs '-XX:+UnlockExperimentalVMOptions', '-XX:+UnlockDiagnosticVMOptions', '-XX:-PreserveFramePointer', '-XX:-DontCompileHugeMethods', '-XX:+EnableJVMCI'
			//, '-javaagent:F:/My_Minecraft_Expansion_3/_forge_mod_dev/test_mod/libs/nalim.jar'
			//, '--dry-run', '--list-modules', '--add-exports=jdk.internal.vm.ci/jdk.vm.ci.code=nalim', '--add-exports=jdk.internal.vm.ci/jdk.vm.ci.code.site=nalim', '--add-exports=jdk.internal.vm.ci/jdk.vm.ci.hotspot=nalim', '--add-exports=jdk.internal.vm.ci/jdk.vm.ci.meta=nalim', '--add-exports=jdk.internal.vm.ci/jdk.vm.ci.runtime=nalim'
			
			// jvmArgs '-XX:+UnlockExperimentalVMOptions', '-XX:-PreserveFramePointer'
			
			// jvmArgs '-XX:+UnlockDiagnosticVMOptions', '-Xlog:class+load=info', '-XX:+LogCompilation', '-XX:+PrintAssembly', '-XX:PrintAssemblyOptions=intel-mnemonic', '-XX:LogFile=F:\\My_Minecraft_Expansion_3\\_forge_mod_dev\\test_mod\\hotspot_logs\\graal_log.log', '-XX:+UnlockExperimentalVMOptions', '-XX:-PreserveFramePointer'
			
			//jvmArgs '-XX:+UnlockDiagnosticVMOptions', '-Xlog:class+load=info', '-XX:+LogCompilation', '-XX:+PrintAssembly', '-XX:PrintAssemblyOptions=intel-mnemonic', '-XX:LogFile=F:\\My_Minecraft_Expansion_3\\_forge_mod_dev\\test_mod\\hotspot_logs\\hotspot_log.log', '-XX:+UnlockExperimentalVMOptions', '-XX:-PreserveFramePointer'
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', 'test_mod'

            mods {
                test_mod {
                    source sourceSets.main
                }
            }
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', 'test_mod'

            mods {
                test_mod {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'test_mod', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                test_mod {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources {
	srcDirs 'src/generated/resources', assembleJasm.outputDirectory
}
processResources.dependsOn assembleJasm

mixin {
    add sourceSets.main, 'test_mod_mixins.refmap.json'
    config 'test_mod_mixins.json'
	
	debug.export = true
    dumpTargetOnFailure = true
}

configurations {
	// Create the library configuration, where our non-mod libraries will be added to
	library
	// Any dependency in the library configuration will also be added to the implementation configuration
	implementation.extendsFrom library
}

// Configure all runs with the following
minecraft.runs.all {
	// Set the minecraft_classpath token to the paths of all jars in the library configuration
	// This is added with the actual Minecraft classpath to get the real classpath information later on
	lazyToken('minecraft_classpath') {
		def plz_be_the_classpath = configurations.library.copyRecursive().resolve().collect { it.absolutePath }.join(File.pathSeparator)
        printf "CLASSPATH_START%n" + plz_be_the_classpath + "%nCLASSPATH_END%n"
        plz_be_the_classpath
	}
}

repositories {
    // Put repositories for dependencies here
    // ForgeGradle automatically adds the Forge maven and Maven Central for you

    // If you have mod jar dependencies in ./libs, you can declare them as a repository like so:
    flatDir {
        dir 'libs'
    }
}

dependencies {
    // Specify the version of Minecraft to use. If this is any group other than 'net.minecraft', it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency, and its patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft 'net.minecraftforge:forge:1.18.2-40.1.31'
	
	annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    // Real mod deobf dependency examples - these get remapped to your current mappings
    // compileOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}:api") // Adds JEI API as a compile dependency
    // runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}") // Adds the full JEI mod as a runtime dependency
    // implementation fg.deobf("com.tterrag.registrate:Registrate:MC${mc_version}-${registrate_version}") // Adds registrate as a dependency

    // Examples using mod jars from ./libs
    // implementation fg.deobf("blank:coolmod-${mc_version}:${coolmod_version}")
	
	library 'com.nalim:nalim'

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
	//from assembleJasm.outputDirectory
    manifest {
        attributes([
                "Specification-Title"     : "test_mod",
                "Specification-Vendor"    : "test_succ",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "test_succ",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish plugin
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
// publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
	options.compilerArgs.addAll(["--add-exports=java.base/jdk.internal.misc=ALL-UNNAMED"])
	//options.compilerArgs.addAll(["--add-modules=jdk.incubator.foreign,jdk.incubator.vector"])
	//options.compilerArgs.addAll(["--enable-preview"])
}
