// ====================
// Vanilla:
// ====================

// Registration
/// Methods from Block.java
void createBlockStateDefinition(StateDefinition.Builder<Block, BlockState> builder);
/// Methods from BlockBehavior.java

// Block States
/// Methods from Block.java
// Returns default state of current block with fields overwritten by applicable fields from [source_block_state]
BlockState withPropertiesOf(BlockState source_block_state);
// Returns [out_block_state] but with [property] copied from [source_block_state]
static <T extends Comparable<T>> BlockState copyProperty(BlockState source_block_state, BlockState out_block_state, Property<T> property)
/// Methods from BlockBehavior.java

// Properties
/// Methods from Block.java
boolean isRandomlyTicking();
boolean propagatesSkylightDown(BlockState blockState, BlockGetter blockGetter, BlockPos blockPos);
float getExplosionResistance();
boolean isPossibleToRespawnInThis();
float getFriction();
float getSpeedFactor();
float getJumpFactor();
boolean dropFromExplosion(Explosion explosion);
SoundType getSoundType(BlockState blockState);
boolean hasDynamicShape();
/// Methods from BlockBehavior.java
boolean isPathfindable(BlockState blockState, BlockGetter blockGetter, BlockPos blockPos, PathComputationType pathComputationType);
MaterialColor defaultMaterialColor();
ResourceLocation getLootTable();
boolean skipRendering(BlockState blockState, BlockState blockState2, Direction direction);
boolean useShapeForLightOcclusion(BlockState blockState);
boolean isSignalSource(BlockState blockState);
PushReaction getPistonPushReaction(BlockState blockState);
FluidState getFluidState(BlockState blockState);
boolean hasAnalogOutputSignal(BlockState blockState);
boolean canBeReplaced(BlockState blockState, BlockPlaceContext blockPlaceContext);
boolean canBeReplaced(BlockState blockState, Fluid fluid);
boolean canSurvive(BlockState blockState, LevelReader levelReader, BlockPos blockPos);
int getAnalogOutputSignal(BlockState blockState, Level level, BlockPos blockPos);
int getSignal(BlockState blockState, BlockGetter blockGetter, BlockPos blockPos, Direction direction);
int getDirectSignal(BlockState blockState, BlockGetter blockGetter, BlockPos blockPos, Direction direction);
boolean isRedstoneConductor(BlockGetter blockGetter, BlockPos blockPos);

// Actions
/// Methods from Block.java
void popExperience(ServerLevel serverLevel, BlockPos blockPos, int amount);
void animateTick(BlockState blockState, Level level, BlockPos blockPos, Random random);
void destroy(LevelAccessor levelAccessor, BlockPos blockPos, BlockState blockState);
BlockState getStateForPlacement(BlockPlaceContext blockPlaceContext);
void handlePrecipitation(BlockState blockState, Level level, BlockPos blockPos, Biome.Precipitation precipitation);
/// Methods from BlockBehavior.java
BlockState updateShape(BlockState blockState, Direction direction, BlockState blockState2, LevelAccessor levelAccessor, BlockPos blockPos, BlockPos blockPos2);
void onPlace(BlockState blockState, Level level, BlockPos blockPos, BlockState blockState2, boolean by_piston);
void onRemove(BlockState blockState, Level level, BlockPos blockPos, BlockState blockState2, boolean by_piston);
InteractionResult use(BlockState blockState, Level level, BlockPos blockPos, Player player, InteractionHand interactionHand, BlockHitResult blockHitResult);
BlockState rotate(BlockState blockState, Rotation rotation);
BlockState mirror(BlockState blockState, Mirror mirror);
void randomTick(BlockState blockState, ServerLevel serverLevel, BlockPos blockPos, Random random);
void tick(BlockState blockState, ServerLevel serverLevel, BlockPos blockPos, Random random);
void onProjectileHit(Level level, BlockState blockState, BlockHitResult blockHitResult, Projectile projectile);
void neighborChanged(Level level, BlockPos blockPos, Block block, BlockPos blockPos2, boolean bl);
void updateNeighbourShapes(LevelAccessor levelAccessor, BlockPos blockPos, int flags);
void updateNeighbourShapes(LevelAccessor levelAccessor, BlockPos blockPos, int flags, int n2);
void updateIndirectNeighbourShapes(BlockState blockState, LevelAccessor levelAccessor, BlockPos blockPos, int flags);
void updateIndirectNeighbourShapes(BlockState blockState, LevelAccessor levelAccessor, BlockPos blockPos, int flags, int n2);

// ====================
// Forge:
// ====================

// Properties
/// Methods from ForgeBlock.java
float getFriction(BlockState state, LevelReader level, BlockPos pos, @Nullable Entity entity);
int getLightEmission(BlockState state, BlockGetter level, BlockPos pos);
boolean isLadder(BlockState state, LevelReader level, BlockPos pos, LivingEntity entity);
boolean makesOpenTrapdoorAboveClimbable(BlockState state, LevelReader level, BlockPos pos, BlockState trapdoorState);
boolean isBurning(BlockState state, BlockGetter level, BlockPos pos);
boolean isBed(BlockState state, BlockGetter level, BlockPos pos, @Nullable Entity player);
float getExplosionResistance(BlockState state, BlockGetter level, BlockPos pos, Explosion explosion);
boolean canSustainPlant(BlockState state, BlockGetter level, BlockPos pos, Direction facing, IPlantable plantable);
boolean isFertile(BlockState state, BlockGetter level, BlockPos pos);
boolean isConduitFrame(BlockState state, LevelReader level, BlockPos pos, BlockPos conduit);
boolean isPortalFrame(BlockState state, BlockGetter level, BlockPos pos); // Nether portal specific
int getExpDrop(BlockState state, LevelReader level, BlockPos pos, int fortuneLevel, int silkTouchLevel);
float getEnchantPowerBonus(BlockState state, LevelReader level, BlockPos pos);
boolean shouldCheckWeakPower(BlockState state, LevelReader level, BlockPos pos, Direction side);
boolean getWeakChanges(BlockState state, LevelReader level, BlockPos pos);
BlockPathTypes getAiPathNodeType(BlockState state, BlockGetter level, BlockPos pos, @Nullable Mob entity);
boolean isSlimeBlock(BlockState state);
boolean isStickyBlock(BlockState state);
boolean canStickTo(BlockState state, BlockState other);
int getFlammability(BlockState state, BlockGetter level, BlockPos pos, Direction direction);
boolean isFlammable(BlockState state, BlockGetter level, BlockPos pos, Direction direction);
int getFireSpreadSpeed(BlockState state, BlockGetter level, BlockPos pos, Direction direction);
boolean isFireSource(BlockState state, LevelReader level, BlockPos pos, Direction direction);
boolean canDropFromExplosion(BlockState state, BlockGetter level, BlockPos pos, Explosion explosion);
boolean collisionExtendsVertically(BlockState state, BlockGetter level, BlockPos pos, Entity collidingEntity);
boolean isScaffolding(BlockState state, LevelReader level, BlockPos pos, LivingEntity entity);
boolean canConnectRedstone(BlockState state, BlockGetter level, BlockPos pos, @Nullable Direction direction);
boolean hidesNeighborFace(BlockGetter level, BlockPos pos, BlockState state, BlockState neighborState, Direction dir);

// Actions
/// Methods from ForgeBlock.java
boolean onDestroyedByPlayer(BlockState state, Level level, BlockPos pos, Player player, boolean willHarvest, FluidState fluid);
BlockState rotate(BlockState state, LevelAccessor level, BlockPos pos, Rotation direction);
void onNeighborChange(BlockState state, LevelReader level, BlockPos pos, BlockPos neighbor);
void onCaughtFire(BlockState state, Level level, BlockPos pos, @Nullable Direction direction, @Nullable LivingEntity igniter);
void onBlockExploded(BlockState state, Level level, BlockPos pos, Explosion explosion);